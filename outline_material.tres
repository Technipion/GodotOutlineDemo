[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "// This shader was created by converting a SpatialMaterial to a ShaderMaterial

shader_type spatial;
render_mode blend_mix,depth_draw_alpha_prepass,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

// custom values:
uniform float line_size;
uniform vec4 line_color;

/*
// not modified:
void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],WORLD_MATRIX[1],vec4(normalize(cross(CAMERA_MATRIX[0].xyz,WORLD_MATRIX[1].xyz)), 0.0),WORLD_MATRIX[3]);
	MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(1.0, 0.0, 0.0, 0.0),vec4(0.0, 1.0/length(WORLD_MATRIX[1].xyz), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0 ,1.0));
}
*/

// modified to needs:
void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	
	vec3 color = albedo.rgb * albedo_tex.rgb; // buffer for color
	float alpha = albedo.a * albedo_tex.a;    // buffer for alpha value
	
	vec2 shifts[] = { vec2(-1, -1), vec2(0, -1), vec2(1, -1),
					  vec2(-1, 0),  vec2(0, 0),  vec2(1, 0),
					  vec2(-1, 1),  vec2(0, 1),  vec2(1, 1) }; // upper left to lower right
	
	float Gx[] = {  -1.0, 0.0, 1.0,
					-2.0, 0.0, 2.0,
					-1.0, 0.0, 1.0 }; // Sobel operator for x-edges
	float Gy[] = { -1.0, -2.0, -1.0,
					0.0,  0.0,  0.0,
					1.0,  2.0,  1.0 }; // Sobel operator for y-edges
	
	float sGx;
	float sGy;
	
	// perform operation:
	for (int i = 0; i < 9; i++) {
		sGx += Gx[i] * textureLod(texture_albedo, base_uv + line_size * shifts[i], 0.0).a;
		sGy += Gy[i] * textureLod(texture_albedo, base_uv + line_size * shifts[i], 0.0).a;
	}
	
	float sG = sqrt(sGx*sGx + sGy*sGy); // get dimensionless number
	
	if (alpha < 0.01) { // this value might be a handy shader parameter too
		EMISSION = line_color.rgb;
		alpha = sG * line_color.a;
		TRANSMISSION = vec3(1, 1, 1);
	}
	
	ALBEDO = color;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = alpha;
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/line_size = 0.01
shader_param/line_color = Plane( 0, 0.8, 0.8, 1 )
