[gd_scene load_steps=9 format=2]

[ext_resource path="res://noisetexture.tres" type="Texture" id=1]
[ext_resource path="res://SpriteOutlineMaterial/first_pass.material" type="Material" id=2]
[ext_resource path="res://Main.gd" type="Script" id=3]
[ext_resource path="res://Sprite3D.gd" type="Script" id=4]
[ext_resource path="res://assets/godotea.png" type="Texture" id=5]

[sub_resource type="SpatialMaterial" id=1]
albedo_color = Color( 0.419608, 0.258824, 0.0392157, 1 )
albedo_texture = ExtResource( 1 )
roughness_texture = ExtResource( 1 )
roughness_texture_channel = 4
normal_enabled = true
normal_scale = 0.1
normal_texture = ExtResource( 1 )
depth_enabled = true
depth_scale = 1.0
depth_deep_parallax = false
depth_flip_tangent = false
depth_flip_binormal = false
depth_texture = ExtResource( 1 )
uv1_scale = Vector3( 0.1, 0.1, 0.1 )
uv1_triplanar = true

[sub_resource type="Animation" id=2]
resource_name = "camera_movement"
length = 4.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Phi:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 360, 0 ) ]
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("Phi/Theta:rotation_degrees:x")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( -30, -0.25, 0, 0.25, 0, -30, -0.25, 0, 0.289574, -14.0786, -30.6432, -0.160899, -11.6181, 0.0876895, 14.409, -30, -0.21639, 10.4557, 0.25, 0, -30, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 1.9, 3.5, 4 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("Phi/Theta:rotation_degrees:y")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 2, 3.5, 4 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath("Phi/Theta:rotation_degrees:z")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 2, 3.5, 4 )
}

[sub_resource type="Environment" id=3]
background_mode = 1
fog_enabled = true
fog_color = Color( 0, 0, 0, 1 )
fog_sun_color = Color( 0.847059, 0.713726, 0.45098, 1 )
fog_depth_begin = 50.0

[node name="Main" type="Spatial"]
script = ExtResource( 3 )

[node name="CSGCombiner" type="CSGCombiner" parent="."]

[node name="CSGBox" type="CSGBox" parent="CSGCombiner"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0 )
width = 200.0
depth = 200.0
material = SubResource( 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "camera_movement"
playback_speed = 0.2
anims/camera_movement = SubResource( 2 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.965926, 0.0669873, -0.25, 0.183013, -0.859789, 0.476727, -0.183013, -0.506236, -0.842752, 0, 0, 0 )
shadow_enabled = true
directional_shadow_split_1 = 0.08
directional_shadow_normal_bias = 0.0
directional_shadow_max_distance = 20.0

[node name="SpotLight" type="SpotLight" parent="."]
transform = Transform( 0.612372, -0.774519, -0.158494, 0.5, 0.224144, 0.836516, -0.612372, -0.591506, 0.524519, -1, 6, 3 )
light_color = Color( 0.913725, 0.894118, 0.745098, 1 )
light_energy = 5.0
shadow_enabled = true
spot_range = 17.0
spot_angle = 39.282

[node name="Phi" type="Spatial" parent="."]
transform = Transform( 1, 0, 6.51683e-07, 0, 1, 0, -6.51683e-07, 0, 1, 0, 0, 0 )

[node name="Theta" type="Spatial" parent="Phi"]
transform = Transform( 1, 0, 0, 0, 0.866025, 0.5, 0, -0.5, 0.866025, 0, 0, 0 )

[node name="Camera" type="Camera" parent="Phi/Theta"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 8 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 3 )

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorPicker" type="ColorPicker" parent="Control"]
margin_left = 27.0914
margin_top = 54.9816
margin_right = 349.092
margin_bottom = 516.982
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HSlider" type="HSlider" parent="Control"]
margin_left = 16.9953
margin_top = 560.331
margin_right = 335.995
margin_bottom = 576.331
max_value = 500.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HSlider2" type="HSlider" parent="Control"]
margin_left = 12.5906
margin_top = 705.688
margin_right = 331.59
margin_bottom = 721.688
max_value = 500.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HSlider3" type="HSlider" parent="Control"]
margin_left = 10.7028
margin_top = 783.085
margin_right = 329.702
margin_bottom = 799.085
max_value = 8.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="LabelColorPicker" type="Label" parent="Control"]
margin_left = 17.9905
margin_top = 18.5197
margin_right = 85.9905
margin_bottom = 32.5197
text = "Line Color:"

[node name="LabelHSlider" type="Label" parent="Control"]
margin_left = 16.4032
margin_top = 539.716
margin_right = 114.403
margin_bottom = 553.716
text = "Line Thickness:"

[node name="LabelHSlider2" type="Label" parent="Control"]
margin_left = 13.8862
margin_top = 680.668
margin_right = 111.886
margin_bottom = 694.668
text = "Line Intensity:"

[node name="LabelHSlider3" type="Label" parent="Control"]
margin_left = 14.5154
margin_top = 762.47
margin_right = 112.515
margin_bottom = 776.47
text = "Line LOD:"

[node name="ButtonHelp" type="Button" parent="Control"]
margin_left = 19.0
margin_top = 612.0
margin_right = 328.0
margin_bottom = 632.0
text = "Toggle Help"

[node name="Panel" type="Panel" parent="Control"]
visible = false
modulate = Color( 1, 1, 1, 0.784314 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 403.0

[node name="RichTextLabelHelp" type="RichTextLabel" parent="Control/Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 10.0
margin_right = -10.0
margin_bottom = -10.0
bbcode_enabled = true
bbcode_text = "
[center][img]icon.png[/img]
[url=www.godotengine.org]Godot Engine[/url][/center]


[center][b]*** OutlineDemo ***[/b]

by community member [wave amp=20 freq=20][b][color=aqua]Technipion[/color][/b][/wave]
for community member [wave amp=20 freq=20][b][color=fuchsia]idi0tf0wl[/color][/b][/wave][/center]


This is a quick'n'dirty example of how to use a Sobel operator for edge detection in a shader in order to draw an outline for sprites (in 3D and 2D).
The materials and shader can be found in the `Material Override` section of [color=red]$Sprite3D[/color].

The shader should be pretty self explanatory. There are [s]two[/s] four shader parameters that matter:

    - [u]line_size[/u]: Sets how far the Sobel operator gets stretched out on the texture.
	- [u]line_color[/u]: Sets the color of the outline (can have alpha values < 1.0 for smooth edges)
	- [u]line_intensity[/u]: Multiplicative factor for Sobel operation.
	- [u]line_lod[/u]: Level-of-detail setting for the texture that's used for edge detection.

These two parameters can be set with the UI on the left. Sorry for the bad practice of just placing the elements individually (instead of using containers), this is just a very quick and simple example.


If you are interested in Sobel operators, check out [url=en.wikipedia.org/wiki/Sobel_operator]Wikipedia[/url]. You will also find better looking versions there.

[s]The image used was provided by [wave amp=20 freq=20][b][color=fuchsia]idi0tf0wl[/color][/b][/wave], he is the copyright holder of it.[/s]
The image is actually Godotea, a mascot that is used quite often in the community.

[s]Please note that I have imported the image with filter=[color=red]false[/color] (pixel art style).[/s]
Nope, filtering is used, since this project aims to replicate the art style of Paper Mario.

Since I am the copyright holder of everything else in this project, [u]I hereby grant you permission to do with it whatevery you want[/u]."
text = "

Godot Engine


*** OutlineDemo ***

by community member Technipion
for community member idi0tf0wl


This is a quick'n'dirty example of how to use a Sobel operator for edge detection in a shader in order to draw an outline for sprites (in 3D and 2D).
The materials and shader can be found in the `Material Override` section of $Sprite3D.

The shader should be pretty self explanatory. There are two four shader parameters that matter:

    - line_size: Sets how far the Sobel operator gets stretched out on the texture.
	- line_color: Sets the color of the outline (can have alpha values < 1.0 for smooth edges)
	- line_intensity: Multiplicative factor for Sobel operation.
	- line_lod: Level-of-detail setting for the texture that's used for edge detection.

These two parameters can be set with the UI on the left. Sorry for the bad practice of just placing the elements individually (instead of using containers), this is just a very quick and simple example.


If you are interested in Sobel operators, check out Wikipedia. You will also find better looking versions there.

The image used was provided by idi0tf0wl, he is the copyright holder of it.
The image is actually Godotea, a mascot that is used quite often in the community.

Please note that I have imported the image with filter=false (pixel art style).
Nope, filtering is used, since this project aims to replicate the art style of Paper Mario.

Since I am the copyright holder of everything else in this project, I hereby grant you permission to do with it whatevery you want."
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Sprite3D" type="Sprite3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1, 1.20843, 0 )
material_override = ExtResource( 2 )
pixel_size = 0.003
texture = ExtResource( 5 )
script = ExtResource( 4 )

[node name="Sprite3D2" type="Sprite3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1.20641, 0 )
material_override = ExtResource( 2 )
pixel_size = 0.003
texture = ExtResource( 5 )
[connection signal="color_changed" from="Control/ColorPicker" to="." method="_on_ColorPicker_color_changed"]
[connection signal="value_changed" from="Control/HSlider" to="." method="_on_HSlider_value_changed"]
[connection signal="value_changed" from="Control/HSlider2" to="." method="_on_HSlider2_value_changed"]
[connection signal="value_changed" from="Control/HSlider3" to="." method="_on_HSlider3_value_changed"]
[connection signal="pressed" from="Control/ButtonHelp" to="." method="_on_ButtonHelp_pressed"]
