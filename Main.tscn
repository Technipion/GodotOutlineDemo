[gd_scene load_steps=9 format=2]

[ext_resource path="res://noisetexture.tres" type="Texture" id=1]
[ext_resource path="res://assets/character.png" type="Texture" id=2]
[ext_resource path="res://Main.gd" type="Script" id=3]

[sub_resource type="SpatialMaterial" id=1]
albedo_color = Color( 0.419608, 0.258824, 0.0392157, 1 )
albedo_texture = ExtResource( 1 )
roughness_texture = ExtResource( 1 )
roughness_texture_channel = 4
normal_enabled = true
normal_scale = 0.1
normal_texture = ExtResource( 1 )
depth_enabled = true
depth_scale = 1.0
depth_deep_parallax = false
depth_flip_tangent = false
depth_flip_binormal = false
depth_texture = ExtResource( 1 )
uv1_scale = Vector3( 0.1, 0.1, 0.1 )
uv1_triplanar = true

[sub_resource type="Animation" id=2]
resource_name = "camera_movement"
length = 4.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Phi:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 360, 0 ) ]
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("Phi/Theta:rotation_degrees:x")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( -30, -0.25, 0, 0.25, 0, -30, -0.25, 0, 0.289574, -14.0786, -30.6432, -0.160899, -11.6181, 0.0876895, 14.409, -30, -0.21639, 10.4557, 0.25, 0, -30, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 1.9, 3.5, 4 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("Phi/Theta:rotation_degrees:y")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 2, 3.5, 4 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath("Phi/Theta:rotation_degrees:z")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.5, 2, 3.5, 4 )
}

[sub_resource type="Environment" id=3]
background_mode = 1
fog_enabled = true
fog_color = Color( 0, 0, 0, 1 )
fog_sun_color = Color( 0.847059, 0.713726, 0.45098, 1 )
fog_depth_begin = 50.0

[sub_resource type="Shader" id=4]
code = "// This shader was created by converting a SpatialMaterial to a ShaderMaterial

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

// custom values:
uniform float line_size;
uniform vec4 line_color;


// not modified:
void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],WORLD_MATRIX[1],vec4(normalize(cross(CAMERA_MATRIX[0].xyz,WORLD_MATRIX[1].xyz)), 0.0),WORLD_MATRIX[3]);
	MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(1.0, 0.0, 0.0, 0.0),vec4(0.0, 1.0/length(WORLD_MATRIX[1].xyz), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0 ,1.0));
}


// modified to needs:
void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	
	vec3 color = albedo.rgb * albedo_tex.rgb; // buffer for color
	float alpha = albedo.a * albedo_tex.a;    // buffer for alpha value
	
	vec2 shifts[] = { vec2(-1, -1), vec2(0, -1), vec2(1, -1),
					  vec2(-1, 0),  vec2(0, 0),  vec2(1, 0),
					  vec2(-1, 1),  vec2(0, 1),  vec2(1, 1) }; // upper left to lower right
	
	float Gx[] = {  -1.0, 0.0, 1.0,
					-2.0, 0.0, 2.0,
					-1.0, 0.0, 1.0 }; // Sobel operator for x-edges
	float Gy[] = { -1.0, -2.0, -1.0,
					0.0,  0.0,  0.0,
					1.0,  2.0,  1.0 }; // Sobel operator for y-edges
	
	float sGx;
	float sGy;
	
	// perform operation:
	for (int i = 0; i < 9; i++) {
		sGx += Gx[i] * textureLod(texture_albedo, base_uv + line_size * shifts[i], 0.0).a;
		sGy += Gy[i] * textureLod(texture_albedo, base_uv + line_size * shifts[i], 0.0).a;
	}
	
	float sG = sqrt(sGx*sGx + sGy*sGy); // get dimensionless number
	
	if (alpha < 0.01) { // this value might be a handy shader parameter too
		color = line_color.rgb;
		alpha = sG * line_color.a;
	}
	
	ALBEDO = color;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = alpha;
}
"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/line_size = 0.01
shader_param/line_color = Plane( 0, 0.8, 0.8, 1 )

[node name="Main" type="Spatial"]
script = ExtResource( 3 )

[node name="CSGCombiner" type="CSGCombiner" parent="."]

[node name="CSGBox" type="CSGBox" parent="CSGCombiner"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0 )
width = 200.0
depth = 200.0
material = SubResource( 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "camera_movement"
playback_speed = 0.2
anims/camera_movement = SubResource( 2 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.258819, 0.965926, 0, -0.965926, 0.258819, 14, 35, 0 )
light_energy = 0.3

[node name="SpotLight" type="SpotLight" parent="."]
transform = Transform( 0.866025, -0.12941, -0.482963, 0.5, 0.224144, 0.836516, 0, -0.965926, 0.258819, -4, 6, 3 )
light_color = Color( 0.913725, 0.894118, 0.745098, 1 )
light_energy = 5.0
spot_range = 17.0
spot_angle = 39.282

[node name="Phi" type="Spatial" parent="."]
transform = Transform( 1, 0, 6.51683e-07, 0, 1, 0, -6.51683e-07, 0, 1, 0, 0, 0 )

[node name="Theta" type="Spatial" parent="Phi"]
transform = Transform( 1, 0, 0, 0, 0.866025, 0.5, 0, -0.5, 0.866025, 0, 0, 0 )

[node name="Camera" type="Camera" parent="Phi/Theta"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 8 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 3 )

[node name="Sprite3D" type="Sprite3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.21846, 0 )
material_override = SubResource( 5 )
texture = ExtResource( 2 )

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorPicker" type="ColorPicker" parent="Control"]
margin_left = 21.9748
margin_top = 41.937
margin_right = 343.975
margin_bottom = 503.937
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HSlider" type="HSlider" parent="Control"]
margin_left = 16.9953
margin_top = 560.331
margin_right = 335.995
margin_bottom = 576.331
max_value = 500.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="LabelColorPicker" type="Label" parent="Control"]
margin_left = 17.9905
margin_top = 18.5197
margin_right = 85.9905
margin_bottom = 32.5197
text = "Line Color:"

[node name="LabelHSlider" type="Label" parent="Control"]
margin_left = 16.4032
margin_top = 539.716
margin_right = 114.403
margin_bottom = 553.716
text = "Line Thickness:"

[node name="ButtonHelp" type="Button" parent="Control"]
margin_left = 19.0
margin_top = 612.0
margin_right = 328.0
margin_bottom = 632.0
text = "Toggle Help"

[node name="Panel" type="Panel" parent="Control"]
visible = false
modulate = Color( 1, 1, 1, 0.501961 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 352.0

[node name="RichTextLabelHelp" type="RichTextLabel" parent="Control/Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 10.0
margin_top = 10.0
margin_right = -10.0
margin_bottom = -10.0
bbcode_enabled = true
bbcode_text = "
[center][img]icon.png[/img]
[url=www.godotengine.org]Godot Engine[/url][/center]


[center][b]*** OutlineDemo ***[/b]

by community member [wave amp=20 freq=20][b][color=aqua]Technipion[/color][/b][/wave]
for community member [wave amp=20 freq=20][b][color=fuchsia]idi0tf0wl[/color][/b][/wave][/center]


This is a quick'n'dirty example of how to use a Sobel operator for edge detection in a shader in order to draw an outline for sprites (in 3D and 2D).
The shader can be found in the `Material Override` section of [color=red]$Sprite3D[/color].

The shader should be pretty self explanatory. There are two shader parameters that matter:

    - [u]line_size[/u]: Sets how far the Sobel operator gets stretched out on the texture.
	- [u]line_color[/u]: Sets the color of the outline (can have alpha values < 1.0 for smooth edges)

These two parameters can be set with the UI on the left. Sorry for the bad practice of just placing the elements individually (instead of using containers), this is just a very quick and simple example.


If you are interested in Sobel operators, check out [url=en.wikipedia.org/wiki/Sobel_operator]Wikipedia[/url]. You will also find better looking versions there.

The image used was provided by [wave amp=20 freq=20][b][color=fuchsia]idi0tf0wl[/color][/b][/wave], he is the copyright holder of it.
Please note that I have imported the image with filter=[color=red]false[/color] (pixel art style).

Since I am the copyright holder of everything else in this project, [u]I hereby grant you permission to do with it whatevery you want[/u]."
text = "

Godot Engine


*** OutlineDemo ***

by community member Technipion
for community member idi0tf0wl


This is a quick'n'dirty example of how to use a Sobel operator for edge detection in a shader in order to draw an outline for sprites (in 3D and 2D).
The shader can be found in the `Material Override` section of $Sprite3D.

The shader should be pretty self explanatory. There are two shader parameters that matter:

    - line_size: Sets how far the Sobel operator gets stretched out on the texture.
	- line_color: Sets the color of the outline (can have alpha values < 1.0 for smooth edges)

These two parameters can be set with the UI on the left. Sorry for the bad practice of just placing the elements individually (instead of using containers), this is just a very quick and simple example.


If you are interested in Sobel operators, check out Wikipedia. You will also find better looking versions there.

The image used was provided by idi0tf0wl, he is the copyright holder of it.
Please note that I have imported the image with filter=false (pixel art style).

Since I am the copyright holder of everything else in this project, I hereby grant you permission to do with it whatevery you want."
__meta__ = {
"_edit_use_anchors_": false
}
[connection signal="color_changed" from="Control/ColorPicker" to="." method="_on_ColorPicker_color_changed"]
[connection signal="value_changed" from="Control/HSlider" to="." method="_on_HSlider_value_changed"]
[connection signal="pressed" from="Control/ButtonHelp" to="." method="_on_ButtonHelp_pressed"]
